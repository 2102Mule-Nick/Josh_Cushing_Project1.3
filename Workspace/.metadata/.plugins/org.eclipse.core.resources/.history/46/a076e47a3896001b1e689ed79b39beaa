package com.staykeep.config;

import java.util.Scanner;

import javax.sql.DataSource;

import org.apache.log4j.Logger;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.EnableAspectJAutoProxy;
import org.springframework.context.annotation.Scope;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.jms.annotation.EnableJms;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.EnableTransactionManagement;

@Configuration
@ComponentScan("com.staykeep") // searches in that package, and any nested packages for Spring annotations
@EnableJms
@EnableTransactionManagement
@Component("config")
@EnableAspectJAutoProxy
public class JTAConfig {

//NO ENV VARIABLE HAVE BEEN SET YET 
	// -josh, 1:26

	// DataSource info
	public static final String DATASOURCE_URL = "jdbc:postgresql://" + System.getenv("DB_URL") + ":5432/"
			+ System.getenv("DB_NAME") + "?";
	public static final String DATASOURCE_DRIVERNAME = "org.postgresql.Driver";
	public static final String DATASOURCE_USERNAME = System.getenv("DB_NAME");
	public static final String DATASOURCE_PASSWORD = System.getenv("DB_PASSWORD");
	public static final String DATASOURCE_SCHEMA = System.getenv("DB_SCHEMA");

	@Bean
	public DataSource dataSource() {

		DriverManagerDataSource dataSource = new DriverManagerDataSource();
		dataSource.setUrl(DATASOURCE_URL);
		dataSource.setDriverClassName(DATASOURCE_DRIVERNAME);
		dataSource.setUsername(DATASOURCE_USERNAME);
		dataSource.setPassword(DATASOURCE_PASSWORD);
		dataSource.setSchema(DATASOURCE_SCHEMA);
		return dataSource;

	}

	@Bean
	public JdbcTemplate jdbcTemplate(DataSource dataSource) {
		JdbcTemplate template = new JdbcTemplate();
		template.setDataSource(dataSource);
		return template;
	}

	// Scanner bean for efficiency
	@Bean
	@Scope("singleton")
	public Scanner scan() {
		return new Scanner(System.in);
	}

	// Logger bean for efficiency
	@Bean
	public Logger log() {
		return Logger.getRootLogger();
	}

}

/*

// JMS Broker Url
// public static final String BROKER_URL = "tcp://localhost:61616";

// JMS Destinations
//public static final String EXAMPLE_QUEUE = "EXAMPLE_QUEUE";
//public static final String EXAMPLE_TOPIC = "EXAMPLE_TOPIC";

// DataSource info. This information is required for the PostgreSql connection.
public static final String DATASOURCE_DRIVERNAME = "org.postgresql.xa.PGXADataSource";

// Database specific info. Real values held as environment variables.
public static final String DATASOURCE_SCHEMA = System.getenv("DB_SCHEMA");
public static final String DATASOURCE_NAME = System.getenv("DB_NAME");
public static final String DATASOURCE_PASSWORD = System.getenv("DB_PASSWORD");
public static final String DATASOURCE_URL = System.getenv("DB_URL");

// This string makes for less typing in the long run.
public static final String COMPLETE_URL = "jdbc:postgresql://" + DATASOURCE_URL + ":5432/" + DATASOURCE_NAME
		+ "?currentSchema=" + DATASOURCE_SCHEMA;

// JDBC Data Source Configuration to set up PostgreSql connection.
@Bean(destroyMethod = "close")
public DataSource dataSource() {
	PoolingDataSource dataSource = new PoolingDataSource();
	dataSource.setClassName(DATASOURCE_DRIVERNAME);
	dataSource.setUniqueName("PostGresDB");
	dataSource.setMaxPoolSize(10);
	dataSource.setAllowLocalTransactions(true);
	dataSource.getDriverProperties().put("Url", COMPLETE_URL);
	dataSource.getDriverProperties().put("user", DATASOURCE_NAME);
	dataSource.getDriverProperties().put("password", DATASOURCE_PASSWORD);
	dataSource.init();
	return dataSource;
}

// JDBC Template bean for efficiency
@Bean
public JdbcTemplate jdbcTemplate(DataSource dataSource) {
	return new JdbcTemplate(dataSource);
}




@Bean
public Topic destinationTopic() {
	return new ActiveMQTopic(EXAMPLE_TOPIC);
}

@Bean
public Queue destinationQueue() {
	return new ActiveMQQueue(EXAMPLE_QUEUE);
}

@Bean
public ConnectionFactory bitronixConnectionFactory() {
	PoolingConnectionFactory connectionFactory = new PoolingConnectionFactory();
	connectionFactory.setClassName("org.apache.activemq.ActiveMQXAConnectionFactory");
	connectionFactory.setUniqueName("activemq");
	connectionFactory.setMaxPoolSize(10);
	connectionFactory.setAllowLocalTransactions(true);
	Properties props = new Properties();
	props.put("brokerURL", BROKER_URL);
	connectionFactory.setDriverProperties(props);
	return connectionFactory;
}

@Bean
public JmsTemplate jmsTemplate(ConnectionFactory bitronixConnectionFactory) {
	JmsTemplate jmsTemplate = new JmsTemplate();
	jmsTemplate.setConnectionFactory(bitronixConnectionFactory);
	jmsTemplate.setReceiveTimeout(10000);
	return jmsTemplate;
}

@Bean
public DefaultMessageListenerContainer jmsContainer(ConnectionFactory connectionFactory,
		JmsMessageListener messageListener) {
	DefaultMessageListenerContainer container = new DefaultMessageListenerContainer();
	container.setConnectionFactory(connectionFactory);
	container.setDestinationName(EXAMPLE_TOPIC);
	container.setPubSubDomain(true);

	container.setMessageListener(messageListener);
	return container;
}

@Bean
public bitronix.tm.Configuration btmConfig() {
	bitronix.tm.Configuration config = TransactionManagerServices.getConfiguration();
	config.setDisableJmx(true);
	config.setServerId("spring-btm");
	return config;
}

@Bean(destroyMethod = "shutdown")
@DependsOn("btmConfig")
public TransactionManager primaryTransactionManager() {
	return TransactionManagerServices.getTransactionManager();
}

@Bean
public JtaTransactionManager jtaTransactionManager(TransactionManager primaryTransactionManager) {
	JtaTransactionManager jtaTransactionManager = new JtaTransactionManager();
	jtaTransactionManager.setTransactionManager(primaryTransactionManager);
	return jtaTransactionManager;
}
*/
