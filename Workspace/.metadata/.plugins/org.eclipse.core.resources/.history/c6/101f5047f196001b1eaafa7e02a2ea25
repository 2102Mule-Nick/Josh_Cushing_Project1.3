package com.staykeep.daoimpl;

import java.sql.Date;
import java.sql.Time;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import com.staykeep.dao.ReservationDao;
import com.staykeep.mapper.ReservationRowMapper;
import com.staykeep.pojo.Guest;
import com.staykeep.pojo.Reservation;

@Repository
public class ReservationDaoImpl implements ReservationDao {
/*
	// StayDaoImpl used only for the changeResToStay() method
	private StayDaoImpl stayDaoImpl;
	
	// JDBC Template to use for database connection.
	private JdbcTemplate jdbcTemplate;

	// GuestRowMapper to return Guest objects from database.
	private ReservationRowMapper reservationRowMapper;

	// Auto-wired JDBC Template setter --> nothing calls this.
	@Autowired
	public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {
		this.jdbcTemplate = jdbcTemplate;
	}

	// Auto-wired ReservationRowMapper setter --> nothing calls this.
	@Autowired
	public void setReservationRowMapper(ReservationRowMapper reservationRowMapper) {
		this.reservationRowMapper = reservationRowMapper;
	}

	// Auto-wired ReservationRowMapper setter --> nothing calls this.
	@Autowired
	public void setStayDaoImpl(StayDaoImpl stayDaoImpl) {
		this.stayDaoImpl = stayDaoImpl;
	}
	
// -----------------------------------------------------------------------------------------

	// Method that returns a list of all reservations.
	@Override
	public List<Reservation> getAllRes() {
		String sql = "SELECT res_id, ch_i_time, ch_i_date, ch_o_time, ch_o_date, r_id, u_id, status FROM reservation";
		List<Reservation> reservationList = jdbcTemplate.query(sql, reservationRowMapper);
		return reservationList;
	}
	
	// Method that returns the reservation with the specified id.
	@Override
	public Reservation getResById(int res_id) {
		String sql = "SELECT res_id, ch_i_time, ch_i_date, ch_o_time, ch_o_date, r_id, u_id, status FROM reservation WHERE res_id = ?";
		List<Reservation> reservationList = jdbcTemplate.query(sql, reservationRowMapper, res_id);
		return reservationList.get(0);
	}

	// Method that returns a list of all reservations with the specified status.
	@Override
	public List<Reservation> getAllResStatus(String status) {
		String sql = "SELECT res_id, ch_i_time, ch_i_date, ch_o_time, ch_o_date, r_id, u_id, status FROM reservation WHERE status = ?";
		List<Reservation> reservationList = jdbcTemplate.query(sql, reservationRowMapper, status);
		return reservationList;
	}

	// Method that returns a boolean that represents whether the
	// check-in time change for the specified reservation was successful or not.
	@Override
	public boolean setResInTime(Time ch_i_time, int res_id) {
		String sql = "UPDATE reservation SET ch_i_time = ? WHERE res_id = ?";
		Object[] args = new Object[] { ch_i_time, res_id };
		return jdbcTemplate.update(sql, args) == 1;
	}

	// Method that returns a boolean that represents whether the
	// check-in date change for the specified reservation was successful or not.
	@Override
	public boolean setResInDate(Date ch_i_date, int res_id) {
		String sql = "UPDATE reservation SET ch_i_date = ? WHERE res_id = ?";
		Object[] args = new Object[] { ch_i_date, res_id };
		return jdbcTemplate.update(sql, args) == 1;
	}

	// Method that returns a boolean that represents whether the
	// check-out date change for the specified reservation was successful or not.
	@Override
	public boolean setResOutTime(Time ch_o_time, int res_id) {
		String sql = "UPDATE reservation SET ch_o_time = ? WHERE res_id = ?";
		Object[] args = new Object[] { ch_o_time, res_id };
		return jdbcTemplate.update(sql, args) == 1;
	}

	// Method that returns a boolean that represents whether the
	// check-out date change for the specified reservation was successful or not.
	@Override
	public boolean setResOutDate(Date ch_o_date, int res_id) {
		String sql = "UPDATE reservation SET ch_o_date = ? WHERE res_id = ?";
		Object[] args = new Object[] { ch_o_date, res_id };
		return jdbcTemplate.update(sql, args) == 1;
	}

	// Method that returns a boolean that represents whether the
	// status change for the specified reservation was successful or not.
	@Override
	public boolean setResStatus(String status, int res_id) {
		String sql = "UPDATE reservation SET status = ? WHERE res_id = ?";
		Object[] args = new Object[] { status, res_id };
		return jdbcTemplate.update(sql, args) == 1;
	}

	// Unique method that transfers data from a reservation object to a stay object
	// when the reservation is redeemed for the specified stay.
	@Override
	public boolean changeResToStay(Reservation res, Guest guest) {
		if(!"past".equals(res.getStatus())){
			Time ch_i_time = res.getCh_i_time();
			Date ch_i_date = res.getCh_i_date();
			Time ch_o_time = res.getCh_o_time();
			Date ch_o_date = res.getCh_o_date();
			float bill = 0.00f;
			int r_id = res.getR_id();
			int g_id = guest.getG_id();
			stayDaoImpl.createNewStay(ch_i_time, ch_i_date, ch_o_time, ch_o_date, g_id, r_id, bill, true);
			return true;
		}else {
			return false;
		}
	}

	// Method that returns a boolean that represents whether the
	// new reservation insertion was successful or not.
	@Override
	public boolean createNewReservation(Time ch_i_time, Date ch_i_date, Time ch_o_time, Date ch_o_date, int r_id,
			int u_id, String status) {
		String sql = "INSERT INTO reservation (ch_i_time, ch_i_date, ch_o_time, ch_o_date, r_id, u_id, status) VALUES ( ?, ?, ?, ?, ?, ?, ? )";
		Object[] args = new Object[] { ch_i_time, ch_i_date, ch_o_time, ch_o_date, r_id, u_id, status };
		return jdbcTemplate.update(sql, args) == 1;
	}

	// Method that returns a boolean that represents whether the
	// specified reservation deletion was successful or not.
	@Override
	public boolean deleteRes(int res_id) {
		String sql = "DELETE FROM reservation WHERE s_id = ?";
		Object[] args = new Object[] {res_id};
		return jdbcTemplate.update(sql, args) == 1;
	}
	*/
}
