package com.staykeep.daoimpl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import com.staykeep.dao.GuestDao;
import com.staykeep.mapper.GuestRowMapper;
import com.staykeep.pojo.Guest;

//Implementation for handling Database functions concerning Guest objects.
@Repository
public class GuestDaoImpl implements GuestDao {

	// JDBC Template to use for database connection.
	private JdbcTemplate jdbcTemplate;

	// GuestRowMapper to return Guest objects from database.
	private GuestRowMapper guestRowMapper;

	// ------------------------------------------------------------

	// Auto-wired JDBC Template setter --> nothing calls this.
	@Autowired
	public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {
		this.jdbcTemplate = jdbcTemplate;
	}

	// Auto-wired GuestRowMapper setter --> nothing calls this.
	@Autowired
	public void setGuestRowMapper(GuestRowMapper guestRowMapper) {
		this.guestRowMapper = guestRowMapper;
	}

	// -----------------------------------------------------------------------------------

	@Override
	public List<Guest> getAllGuests() {
		String sql = "SELECT g_id, f_name, l_name, cc_num FROM guest";
		List<Guest> guestList = jdbcTemplate.query(sql, guestRowMapper);
		return guestList;
	}

	// Gets guest id, first name, last name, and credit card for a given guest id.
	// Returns a Guest object with these values.
	@Override
	public Guest getGuestInfoById(int g_id) {
		String sql = "SELECT g_id, f_name, l_name, cc_num FROM guest WHERE g_id = ?";
		List<Guest> guestList = jdbcTemplate.query(sql, guestRowMapper, g_id);
		return guestList.get(0);
	}

	// Sets first name for a given guest id.
	@Override
	public boolean setGuestFname(String f_name, int g_id) {
		String sql = "UPDATE guest SET f_name = ? WHERE g_id = ?";
		Object[] args = new Object[] { f_name, g_id };
		return jdbcTemplate.update(sql, args) == 1;
	}

	// Sets last name for a given guest id.
	@Override // <--Overrides abstract method
	public boolean setGuestLname(String l_name, int g_id) {
		String sql = "UPDATE guest SET l_name = ? WHERE g_id = ?";
		Object[] args = new Object[] { l_name, g_id };
		return jdbcTemplate.update(sql, args) == 1;
	}

	// Sets credit card number for a given guest id.
	@Override // <--Overrides abstract method
	public boolean setGuestCcnum(String cc_num, int g_id) {
		String sql = "UPDATE guest SET cc_num = ? WHERE g_id = ?";
		Object[] args = new Object[] { cc_num, g_id };
		return jdbcTemplate.update(sql, args) == 1;
	}

	// Inserts a new guest into the database with the given values.
	@Override
	public boolean createNewGuest(String f_name, String l_name, String cc_num) {
		String sql = "INSERT INTO guest (f_name, l_name, cc_num) VALUES ( ?, ?, ? )";
		Object[] args = new Object[] { f_name, l_name, cc_num };
		return jdbcTemplate.update(sql, args) == 1;
	}

	@Override
	public boolean deleteGuest(int g_id) {
		String sql = "DELETE FROM guest WHERE g_id = ?";
		Object[] args = new Object[] { g_id };
		return jdbcTemplate.update(sql, args) == 1;
	}
}
